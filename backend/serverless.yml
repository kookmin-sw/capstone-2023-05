service: serverless-naruhodoo

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  architecture: x86_64
  region: ap-northeast-2
  profile: ${env:AWS_PROFILE}
  stage: ${opt:stage, env:PRIVATE_STAGE}
  vpc:
    securityGroupIds:
      - ${ssm:/naruhodoo/aws/security_group}
    subnetIds:
      - ${ssm:/naruhodoo/aws/subnet1}
      - ${ssm:/naruhodoo/aws/subnet4}
  environment:
    POSTGRES_HOST: ${ssm:/naruhodoo/${self:provider.stage}/postgres/host, env:POSTGRES_HOST}
    POSTGRES_PORT: ${ssm:/naruhodoo/${self:provider.stage}/postgres/port, env:POSTGRES_PORT}
    POSTGRES_USER: ${ssm:/naruhodoo/${self:provider.stage}/postgres/user, env:POSTGRES_USER}
    POSTGRES_PASSWORD: ${ssm:/naruhodoo/${self:provider.stage}/postgres/password, env:POSTGRES_PASSWORD}
    POSTGRES_DB: ${ssm:/naruhodoo/${self:provider.stage}/postgres/db, env:POSTGRES_DB}
    REDIS_HOST: ${ssm:/naruhodoo/${self:provider.stage}/redis/host, env:REDIS_HOST}
    REDIS_PORT: ${ssm:/naruhodoo/${self:provider.stage}/redis/port, env:REDIS_PORT}
    REDIS_DB: ${ssm:/naruhodoo/${self:provider.stage}/redis/db, env:REDIS_DB}
    DYNAMODB_WS_CONNECTION_TABLE: ${ssm:/naruhodoo/${self:provider.stage}/dynamodb/ws_connection_table, env:DYNAMODB_WS_CONNECTION_TABLE}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "dynamodb:GetItem"
          Resource: #TODO: 사용하고 있는 테이블만 허용하도록 제한해야 함
            - "arn:aws:dynamodb:ap-northeast-2:401482569934:table/*"

        - Effect: "Allow"
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:ap-northeast-2:401482569934:*/*/*/*"

package:
  patterns:
    - "!volumes"
    - "!node_modules"

functions:
  hello:
    handler: src/lambda/handler.create
    events:
      - http:
          path: /hello
          method: get
          cors:
            origin: "*"
            headers: "*"

  platform:
    handler: src/lambda/handler.get_platform
    events:
      - http:
          path: /platform
          method: get
          cors:
            origin: "*"
            headers: "*"

  hello-redis:
    handler: src/lambda/handler.hello_redis
    events:
      - http:
          path: /hello-redis
          method: get
          cors:
            origin: "*"
            headers: "*"
  hello-db:
    handler: src/lambda/handler.hello_db
    events:
      - http:
          path: /hello-db
          method: get
          cors:
            origin: "*"
            headers: "*"

  like-handler:
    handler: src/lambda/handler.like_handler
    events:
      - websocket:
          route: like
  connect-handler:
    handler: src/lambda/handler.connect_handler
    events:
      - websocket:
          route: $connect
  disconnect-handler:
    handler: src/lambda/handler.disconnect_handler
    events:
      - websocket:
          route: $disconnect
  init-join-handler:
    handler: src/lambda/handler.init_join_handler
    events:
      - websocket:
          route: initJoin
  send-handler:
    handler: src/lambda/handler.send_handler
    events:
      - websocket:
          route: sendOpinion
  get-battles-handler:
    handler: src/lambda/handler.get_battles
    events:
      - websocket:
          route: getBattles
  create-battles-handler:
    handler: src/lambda/handler.create_battle
    events:
      - websocket:
          route: createBattle
  get-battle-handler:
    handler: src/lambda/handler.get_battle
    events:
      - websocket:
          route: getBattle
  start-battle-handler:
    handler: src/lambda/handler.start_battle
    events:
      - websocket:
          route: startBattle
  end-battle-handler:
    handler: src/lambda/handler.end_battle
    events:
      - websocket:
          route: endBattle
  start-round-handler:
    handler: src/lambda/handler.start_round
    events:
      - websocket:
          route: startRound
  get-current-round-handler:
    handler: src/lambda/handler.get_current_round
    events:
      - websocket:
          route: getCurrentRound
  end-round-handler:
    handler: src/lambda/handler.end_round
    events:
      - websocket:
          route: endRound
  vote-handler:
    handler: src/lambda/handler.vote_handler
    events:
      - websocket:
          route: vote
  preparation-start-handler:
    handler: src/lambda/handler.preparation_start_handler
    events:
      - websocket:
          route: preparationStart
    timeout: 100
  get-final-result:
    handler: src/lambda/handler.get_final_result
    events:
      - websocket:
          route: getFinalResult

custom:
  customDomain:
    domainName: ${env:CUSTOM_DOMAIN}
    stage: ${self:provider.stage}
    basePath: ${self:provider.stage}
    certificateName: ${env:CERTIFICATE_NAME}
    createRoute53Record: true
  pythonRequirements:
    dockerizePip: true # Use docker to install dependencies for non-linux environments
    slim: true # Slim down the size of the package by removing unneeded files
    cacheLocation: ".pip_cache"
    noDeploy:
      - pytest
      - boto3

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-offline
